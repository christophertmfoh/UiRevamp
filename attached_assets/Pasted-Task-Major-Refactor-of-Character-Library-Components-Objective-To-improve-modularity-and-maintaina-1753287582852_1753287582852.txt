Task: Major Refactor of Character Library Components

Objective: To improve modularity and maintainability, extract all components related to the Character Library feature from the monolithic workspace.tsx into a new, dedicated folder structure.

Instructions:

Create New Files and Folders:

Create a new folder in the project root named CharacterLibrary.

Inside this new CharacterLibrary folder, create the following five (5) new component files:

GenerateCharacterModal.tsx

ManagePortraitsModal.tsx

CharacterDetail.tsx

CharacterCard.tsx

CharacterLibrary.tsx

Move Component Code from workspace.tsx:

From the source file workspace.tsx, locate and cut the following five React components: GenerateCharacterModal, ManagePortraitsModal, CharacterDetail, CharacterCard, and CharacterLibrary.

Paste each of these five components into its corresponding new file created in Step 1.

Resolve All Dependencies in New Files:

For each of the five new files, add all necessary import statements at the top to resolve every dependency. Pay close attention to the new relative paths. For example:

Types (Project, Character, ImageAsset, etc.) will be imported from ../types.

Services (generateNewCharacter, fleshOutCharacter, etc.) will be imported from ../geminiService.

Constants (characterArchetypes) will be imported from ../constants.

Within CharacterLibrary.tsx, you will need to import CharacterDetail, CharacterCard, and the modals from their new local files (e.g., import { CharacterDetail } from './CharacterDetail';).

Manage Exports:

Ensure each component is correctly exported from its new file so it can be imported and used by other components.

Update workspace.tsx:

After cutting the code, add a single new import statement to the top of workspace.tsx to import CharacterLibrary from its new location: import { CharacterLibrary } from './CharacterLibrary/CharacterLibrary';.

Verify that the renderTool function's case for 'characters' now correctly references the imported <CharacterLibrary ... /> component.