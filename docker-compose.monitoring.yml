version: '3.8'

services:
  # Application with metrics enabled
  app:
    extends:
      file: docker-compose.yml
      service: app
    environment:
      - METRICS_ENABLED=true
      - PROMETHEUS_METRICS=true
    labels:
      - "prometheus.scrape=true"
      - "prometheus.port=5000"
      - "prometheus.path=/api/metrics"

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: fablecraft-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./docker/monitoring/alerting-rules.yml:/etc/prometheus/rules/alerting-rules.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - monitoring
      - default
    depends_on:
      - app

  # Grafana for visualization
  grafana:
    image: grafana/grafana:10.0.0
    container_name: fablecraft-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
      - GF_FEATURE_TOGGLES_ENABLE=publicDashboards
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./docker/monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - monitoring
    depends_on:
      - prometheus

  # AlertManager for handling alerts
  alertmanager:
    image: prom/alertmanager:v0.25.0
    container_name: fablecraft-alertmanager
    restart: unless-stopped
    ports:
      - "9093:9093"
    volumes:
      - ./docker/monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    networks:
      - monitoring

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:v1.6.0
    container_name: fablecraft-node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - monitoring

  # cAdvisor for container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: fablecraft-cadvisor
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    networks:
      - monitoring

  # Postgres Exporter (if using PostgreSQL)
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.13.0
    container_name: fablecraft-postgres-exporter
    restart: unless-stopped
    ports:
      - "9187:9187"
    environment:
      - DATA_SOURCE_NAME=${DATABASE_URL}
    networks:
      - monitoring
    depends_on:
      - postgres

  # Redis Exporter (if using Redis for caching)
  redis-exporter:
    image: oliver006/redis_exporter:v1.52.0
    container_name: fablecraft-redis-exporter
    restart: unless-stopped
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis://redis:6379
    networks:
      - monitoring
    depends_on:
      - redis

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: fablecraft-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - monitoring
      - default

  # Nginx Exporter (if using Nginx as reverse proxy)
  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:0.10.0
    container_name: fablecraft-nginx-exporter
    restart: unless-stopped
    ports:
      - "9113:9113"
    command:
      - '-nginx.scrape-uri=http://nginx:80/nginx_status'
    networks:
      - monitoring
    depends_on:
      - nginx

  # Nginx reverse proxy with metrics
  nginx:
    image: nginx:alpine
    container_name: fablecraft-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    networks:
      - monitoring
      - default
    depends_on:
      - app

  # Log aggregation with Loki
  loki:
    image: grafana/loki:2.8.0
    container_name: fablecraft-loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ./docker/monitoring/loki.yml:/etc/loki/local-config.yaml
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - monitoring

  # Log shipping with Promtail
  promtail:
    image: grafana/promtail:2.8.0
    container_name: fablecraft-promtail
    restart: unless-stopped
    volumes:
      - ./docker/monitoring/promtail.yml:/etc/promtail/config.yml
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yml
    networks:
      - monitoring
    depends_on:
      - loki

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.47
    container_name: fablecraft-jaeger
    restart: unless-stopped
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - monitoring

  # Uptime monitoring
  uptime-kuma:
    image: louislam/uptime-kuma:1.23.0
    container_name: fablecraft-uptime
    restart: unless-stopped
    ports:
      - "3002:3001"
    volumes:
      - uptime_data:/app/data
    networks:
      - monitoring

networks:
  monitoring:
    driver: bridge
    name: fablecraft-monitoring

volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  alertmanager_data:
    driver: local
  redis_data:
    driver: local
  loki_data:
    driver: local
  uptime_data:
    driver: local